!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.observers=[]}return r(e,[{key:"subscribe",value:function(e){this.observers.push(e)}},{key:"unsubscribe",value:function(e){this.observers=this.observers.filter(function(t){return t!==e})}},{key:"broadcast",value:function(e){this.observers.forEach(function(t){return t(e)})}}]),e}();t.Observer=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Controller=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.dispatcher=e,n.response={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Observer),r(t,[{key:"sendRequest",value:function(e){this.response.event="CONTROLLER_SEND_TO_SERVER",this.response.message="➡️ Контроллер получил событие "+e.event+" и передаёт запрос диспетчеру",this.broadcast(this.response),this.dispatcher.dispatch({event:e.event,data:e.content})}},{key:"addItem",value:function(e){this.sendRequest({event:"ADD_ITEM",content:e})}},{key:"getItems",value:function(){this.sendRequest({event:"GET_ITEMS"})}},{key:"deleteItems",value:function(){this.sendRequest({event:"DELETE_ITEMS"})}}]),t}();t.Controller=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Store=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.dispatcher=e,n.dispatchToken=e.register(function(e){n.invokeOnDispatch(e)}),n.changed=!1,n.response={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Observer),r(t,[{key:"hasChanged",value:function(){if(this.dispatcher.isDispatching)return this.changed;console.log("Команда должна выпполняться только во время обработки запроса")}},{key:"invokeOnDispatch",value:function(e){this.changed=!1,this.response.event="SERVER_GETS_DATA",this.response.message="⤵️ Хранилище получило запрос",this.broadcast(this.response),this.onDispatch(e),this.changed&&this.emitChange(e)}},{key:"onDispatch",value:function(e){return console.log("Эта функция должна быть переопределена в расширении класса"),!1}},{key:"emitChange",value:function(e){this.dispatcher.isDispatching?(this.response.event=e.event,this.broadcast(this.response),this.changed=!0):console.log("Команда должна выпполняться только во время обработки запроса")}}]),t}();t.Store=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MyStore=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(2);var o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.items=[],n.actions={ADD_ITEM:n.addItem,GET_ITEMS:n.getItems,DELETE_ITEMS:n.deleteItems},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Store),r(t,[{key:"onDispatch",value:function(e){this.actions[e.event].bind(this)(e.data),this.changed=!0}},{key:"addItem",value:function(e){this.items.push(e),this.response.message="📥 Текст «"+e+"» добавлен в хранилище"}},{key:"getItems",value:function(){this.response.data=this.items,this.response.message="📦 Получено содержимое хранилища"}},{key:"deleteItems",value:function(){this.items=[],this.response.data=this.items,this.response.message="🗑 Cодержимое хранилища удалено"}}]),t}();t.MyStore=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.isStarted=!1,this.elem=r,t.forEach(function(e){e.subscribe(function(e){n.update(e)})})}return r(e,[{key:"update",value:function(e){this.isStarted||(this.elem&&(this.elem.innerHTML=""),this.isStarted=!0),this.printToPage(e),console.log(e.message)}},{key:"printToPage",value:function(e){if(this.elem){var t='<span class="log__event">'+e.event+"</span>",n='<div class="log__message">'+e.message+" "+t+"</div>";this.elem.innerHTML=""+n+this.elem.innerHTML}}}]),e}();t.Log=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dispatcher=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.lastId=1,e.isDispatching=!1,e.isHandled={},e.isPending={},e.pendingPayload={},e.callbacks={},e.response={},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Observer),r(t,[{key:"register",value:function(e){var t="disp-"+this.lastId;return this.callbacks[t]=e,this.lastId++,t}},{key:"unRegister",value:function(e){delete this.callbacks[e]}},{key:"dispatch",value:function(e){var t=void 0;if(this.isDispatching)return console.log("Запрос не может быть выполнен во время обработки другого запроса"),!1;for(t in this.startDispatching(e),this.response.event="DISPATCHER_DISPATCH",this.response.message="➡️ Диспетчер получил запрос и передаёт его хранилищам",this.broadcast(this.response),this.callbacks)this.isPending[t]||(this.pendingPayoad=e,this.invokeCallback(t));this.stopDispatching()}},{key:"invokeCallback",value:function(e){this.isPending[e]=!0,this.callbacks[e](this.pendingPayoad),this.isHandled[e]=!0}},{key:"isDispatching",value:function(){return this.isDispatching}},{key:"startDispatching",value:function(e){var t=void 0;for(t in this.callbacks)this.isPending[t]=!1,this.isHandled[t]=!1;this.pendingPayload=e,this.isDispatching=!0}},{key:"stopDispatching",value:function(){delete this.pendingPayload,this.isDispatching=!1}}]),t}();t.Dispatcher=o},function(e,t,n){"use strict";n(11);var r=n(5),i=n(4),o=n(3),s=n(1),a=new r.Dispatcher,c=new o.MyStore(a),u=new s.Controller(a,c),l=document.querySelector(".stream__log"),f=document.querySelector(".stream__btn-reverse"),p=!1,h=(new i.Log([a,u,c],l),document.querySelector(".view-stub__input")),d=document.querySelector(".view-stub__btn--apply"),v=document.querySelector(".view-stub__btn--all"),b=document.querySelector(".view-stub__btn--delete"),y=document.querySelector(".view-stub__response"),_=document.querySelector(".stream__result"),g=document.querySelector(".stream__item--result"),m=!1;function O(e){e.length>0?_.innerHTML=e.join("<br>"):_.innerHTML="<i>(Пусто)</i>"}d.disabled=!h.value,h.addEventListener("input",function(){d.disabled=!h.value}),d.addEventListener("click",function(){var e=h.value;u.addItem(e),h.value="",d.disabled=!h.value}),v.addEventListener("click",function(){m?(g.classList.remove("stream__item--result-expanded"),v.innerHTML=v.dataset.textShow):(u.getItems(),v.innerHTML=v.dataset.textHide),m=!m}),b.addEventListener("click",function(){u.deleteItems()}),f.addEventListener("click",function(){l.classList.toggle("log--reverse"),f.innerHTML=p?f.dataset.textNew:f.dataset.textOld,p=!p}),c.subscribe(function(e){var t;y.innerHTML=e.message,"GET_ITEMS"===e.event?(t=e.data,g.classList.add("stream__item--result-expanded"),O(t)):m&&O(e.data)})},,,,,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,